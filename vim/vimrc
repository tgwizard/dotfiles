" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" vundle, must be first
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
Bundle 'gmarik/vundle'

" bundles
" github
Bundle 'jnurmine/Zenburn'

" github/helino
Bundle 'helino/vim-json'
Bundle 'helino/vim-markdown'
Bundle 'helino/vim-nasm'
Bundle 'helino/vim-whitespace'
Bundle 'helino/vim-ftplugins'

" vim.org...
" none yet

" required by vundle
filetype plugin indent on

" misc
set wildmode=list
set mouse=a
set backspace=indent,eol,start " allow backspacing over stuff in insert mode
set history=50 " keep 50 lines of command line history

" indentation
set tabstop=4
set expandtab
set smarttab
set smartindent
set shiftwidth=4
set autoindent

" look
set t_Co=256
set background=dark
let g:zenburn_high_Contrast=1
set number
set ruler " show the cursor position all the time
set showcmd " display incomplete commands
set colorcolumn=80
syntax on

" search
set hlsearch " highlight search
set incsearch " incremental search, search as you type
set smartcase
highlight Search ctermfg=Black ctermbg=Yellow cterm=NONE

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif

" mappings

let mapleader=','

" don't use Ex mode, use Q for formatting
map Q gq

" map ESC to JJ
imap jj <Esc>
imap <C-Space> <C-n>
imap <C-@> <C-n>

" C-t to create a new tab in normal mode
map <C-t> :tabnew<CR>

" map <C-h> and <C-l> to switch tabs
map <C-h> :tabprevious<CR>
map <C-l> :tabnext<CR>
imap <C-h> <Esc>:tabprevious<CR>i
imap <C-l> <Esc>:tabnext<CR>i

" easy copy/past to clipboard
map <leader>y "+y
nmap <leader>p "+p

" commands
" clear the current search highlight
command! CS let @/ = ""

" windows-specific stuff
" TODO: make into plugin
if has("win32") || has("win16")
    func Backspace()
        if col('.') == 1
            if line('.')  != 1
                return  "\<ESC>kA\<Del>"
            else
                return ""
            endif
        else
            return "\<Left>\<Del>"
        endif
    endfunc

    inoremap  <c-r>=Backspace()<CR>
else
    colorscheme zenburn
endif
